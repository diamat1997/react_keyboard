{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","key","keyPress","event","setState","document","addEventListener","this","removeEventListener","message","className","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAyB,CACvBC,IAAK,IAFT,EAaEC,SAAW,SAACC,GACV,EAAKC,SAAS,CAAEH,IAAKE,EAAMF,OAd/B,uDAKE,WACEI,SAASC,iBAAiB,QAASC,KAAKL,YAN5C,kCASE,WACEG,SAASG,oBAAoB,QAASD,KAAKL,YAV/C,oBAiBE,WACE,IAAQD,EAAQM,KAAKP,MAAbC,IAEFQ,EAAUR,EAAG,mCACaA,EADb,KAEf,0BAEJ,OACE,qBAAKS,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACID,UA3BZ,GAAyBE,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.a2fcb330.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  key: string;\n};\n\nexport class App extends Component {\n  state: Readonly<State> = {\n    key: '',\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', this.keyPress);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.keyPress);\n  }\n\n  keyPress = (event: KeyboardEvent) => {\n    this.setState({ key: event.key });\n  };\n\n  render() {\n    const { key } = this.state;\n\n    const message = key\n      ? `The last pressed key is [${key}]`\n      : 'Nothing was pressed yet';\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          { message }\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}